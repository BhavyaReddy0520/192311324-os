/*1)Construct a c program to simulate a round robin scheduling algorithm with c.
Code:*/
#include <stdio.h>
#define MAX_PROCESSES 100
typedef struct {
int id;
int burstTime;
int remainingTime;
int completionTime;
int turnaroundTime;
int waitingTime;
} Process;
void roundRobin(Process processes[], int n, int timeQuantum) {
int time = 0;
int completed = 0;
printf("Process Execution Order:\n");
while (completed < n) {
int allDone = 1;
for (int i = 0; i < n; i++) {
if (processes[i].remainingTime > 0) {
allDone = 0;
if (processes[i].remainingTime > timeQuantum) {
time += timeQuantum;
processes[i].remainingTime -= timeQuantum;
} else {
time += processes[i].remainingTime;
processes[i].completionTime = time; // Set completion time
processes[i].turnaroundTime = processes[i].completionTime;
processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
printf("Process %d executed from time %d to %d\n", processes[i].id, time -
processes[i].remainingTime, time);
processes[i].remainingTime = 0;
completed++;
}
}
}
if (allDone) {
break;
}
}
}
void displayProcessTimes(Process processes[], int n) {
printf("\nProcess ID\tCompletion Time\tTurnaround Time\tWaiting Time\n");
for (int i = 0; i < n; i++) {
printf("%d\t\t%d\t\t%d\t\t%d\n",
processes[i].id,
processes[i].completionTime,
processes[i].turnaroundTime,
processes[i].waitingTime);
}
}
int main() {
int n, timeQuantum;
Process processes[MAX_PROCESSES];
printf("Enter the number of processes: ");
scanf("%d", &n);
for (int i = 0; i < n; i++) {
processes[i].id = i + 1; // Assign process ID
printf("Enter burst time for process %d: ", processes[i].id);
scanf("%d", &processes[i].burstTime);
processes[i].remainingTime = processes[i].burstTime; // Initialize remaining time
processes[i].completionTime = 0; // Initialize completion time
processes[i].turnaroundTime = 0; // Initialize turnaround time
processes[i].waitingTime = 0; // Initialize waiting time
}
printf("Enter time quantum: ");
scanf("%d", &timeQuantum);
roundRobin(processes, n, timeQuantum);
displayProcessTimes(processes, n);
return 0;
}
