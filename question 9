/*4)Illustrate the deadlock avoidance problem by bankers algorithm
Code:*/
#include <stdio.h>
#include <stdbool.h>
#defineP 5
#defineR 3
int allocation[P][R] = { {0, 1, 0},
{2, 0, 0},
{3, 0, 2},
{2, 1, 1},
{0, 0, 2} };
int maximum[P][R] = { {7, 5, 3},
{3, 2, 2},
{9, 0, 2},
{2, 2, 2},
{4, 3, 3} };
int need[P][R];
int available[R] = {3, 3, 2};
void calculateNeed() {
for (int i = 0; i < P; i++)
for (int j = 0; j < R; j++)
need[i][j] = maximum[i][j] - allocation[i][j];
}
bool isSafe() {
int work[R];
bool finish[P] = {0};
int safeSeq[P];
int count = 0;
for (int i = 0; i < R; i++)
work[i] = available[i];
while (count < P) {
boolfound = false;
for (int p = 0; p < P; p++) {
if (!finish[p]) {
int j;
for (j = 0; j < R; j++)
if (need[p][j] > work[j])
break;
if (j == R) {
for (int k = 0; k < R; k++)
work[k] += allocation[p][k];
safeSeq[count++] = p;
finish[p] = 1;
found = true;
}
}
}
if (!found) {
printf("System is not in a safe state\n");
return false;
}
}
printf("System is in a safe state.\nSafe sequence is: ");
for (int i = 0; i < P ; i++)
printf("%d ",safeSeq[i]);
printf("\n");
return true;
}
int main() {
calculateNeed();
isSafe();
return 0;}
